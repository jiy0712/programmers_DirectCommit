logo
코딩테스트 연습
2022 KAKAO TECH INTERNSHIP
두 큐 합 같게 만들기
도움말
컴파일 옵션
두 큐 합 같게 만들기
제출 내역
문제 설명
길이가 같은 두 개의 큐가 주어집니다. 하나의 큐를 골라 원소를 추출(pop)하고, 추출된 원소를 다른 큐에 집어넣는(insert) 작업을 통해 각 큐의 원소 합이 같도록 만들려고 합니다. 이때 필요한 작업의 최소 횟수를 구하고자 합니다. 한 번의 pop과 한 번의 insert를 합쳐서 작업을 1회 수행한 것으로 간주합니다.

큐는 먼저 집어넣은 원소가 먼저 나오는 구조입니다. 이 문제에서는 큐를 배열로 표현하며, 원소가 배열 앞쪽에 있을수록 먼저 집어넣은 원소임을 의미합니다. 즉, pop을 하면 배열의 첫 번째 원소가 추출되며, insert를 하면 배열의 끝에 원소가 추가됩니다. 예를 들어 큐 [1, 2, 3, 4]가 주어졌을 때, pop을 하면 맨 앞에 있는 원소 1이 추출되어 [2, 3, 4]가 되며, 이어서 5를 insert하면 [2, 3, 4, 5]가 됩니다.

다음은 두 큐를 나타내는 예시입니다.

queue1 = [3, 2, 7, 2]
queue2 = [4, 6, 5, 1]
두 큐에 담긴 모든 원소의 합은 30입니다. 따라서, 각 큐의 합을 15로 만들어야 합니다. 예를 들어, 다음과 같이 2가지 방법이 있습니다.

queue2의 4, 6, 5를 순서대로 추출하여 queue1에 추가한 뒤, queue1의 3, 2, 7, 2를 순서대로 추출하여 queue2에 추가합니다. 그 결과 queue1은 [4, 6, 5], queue2는 [1, 3, 2, 7, 2]가 되며, 각 큐의 원소 합은 15로 같습니다. 이 방법은 작업을 7번 수행합니다.
queue1에서 3을 추출하여 queue2에 추가합니다. 그리고 queue2에서 4를 추출하여 queue1에 추가합니다. 그 결과 queue1은 [2, 7, 2, 4], queue2는 [6, 5, 1, 3]가 되며, 각 큐의 원소 합은 15로 같습니다. 이 방법은 작업을 2번만 수행하며, 이보다 적은 횟수로 목표를 달성할 수 없습니다.
따라서 각 큐의 원소 합을 같게 만들기 위해 필요한 작업의 최소 횟수는 2입니다.

길이가 같은 두 개의 큐를 나타내는 정수 배열 queue1, queue2가 매개변수로 주어집니다. 각 큐의 원소 합을 같게 만들기 위해 필요한 작업의 최소 횟수를 return 하도록 solution 함수를 완성해주세요. 단, 어떤 방법으로도 각 큐의 원소 합을 같게 만들 수 없는 경우, -1을 return 해주세요.

제한사항
1 ≤ queue1의 길이 = queue2의 길이 ≤ 300,000
1 ≤ queue1의 원소, queue2의 원소 ≤ 109
주의: 언어에 따라 합 계산 과정 중 산술 오버플로우 발생 가능성이 있으므로 long type 고려가 필요합니다.
입출력 예
queue1	queue2	result
[3, 2, 7, 2]	[4, 6, 5, 1]	2
[1, 2, 1, 2]	[1, 10, 1, 2]	7
[1, 1]	[1, 5]	-1
입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.

입출력 예 #2

두 큐에 담긴 모든 원소의 합은 20입니다. 따라서, 각 큐의 합을 10으로 만들어야 합니다. queue2에서 1, 10을 순서대로 추출하여 queue1에 추가하고, queue1에서 1, 2, 1, 2와 1(queue2으로부터 받은 원소)을 순서대로 추출하여 queue2에 추가합니다. 그 결과 queue1은 [10], queue2는 [1, 2, 1, 2, 1, 2, 1]가 되며, 각 큐의 원소 합은 10으로 같습니다. 이때 작업 횟수는 7회이며, 이보다 적은 횟수로 목표를 달성하는 방법은 없습니다. 따라서 7를 return 합니다.

입출력 예 #3

어떤 방법을 쓰더라도 각 큐의 원소 합을 같게 만들 수 없습니다. 따라서 -1을 return 합니다.

solution.py
1
from collections import deque
2
​
3
def solution(queue1, queue2):
4
    queue1 = deque(queue1)
5
    queue2 = deque(queue2)
6
    
7
    qq1 = sum(queue1)
8
    qq2 = sum(queue2)
9
    
10
    total = qq1 + qq2
11
    
12
    if total % 2 != 0:
13
        return -1
14
    
15
    t = total // 2
16
    c = queue1 + queue2
17
    n = len(c)
18
    csum = qq1
19
    left, right = 0, len(queue1) - 1
20
    MIN = float('inf')
21
    
22
    while left < n and right < n:
23
        if csum == t:
24
            MIN = min(MIN, left + (right - len(queue1) + 1))
25
            csum -= c[left]
26
            left += 1
27
        elif csum < t:
28
            right += 1
29
            if right < n:
30
                csum += c[right]
31
        else:
32
            csum -= c[left]
33
            left += 1
34
            
35
    return MIN if MIN != float('inf') else -1
36
​
실행 결과
채점을 시작합니다.
정확성  테스트
테스트 1 〉	통과 (0.01ms, 10.2MB)
테스트 2 〉	통과 (0.01ms, 10.2MB)
테스트 3 〉	통과 (0.02ms, 10.2MB)
테스트 4 〉	통과 (0.01ms, 10.2MB)
테스트 5 〉	통과 (0.03ms, 10.1MB)
테스트 6 〉	통과 (0.04ms, 10.2MB)
테스트 7 〉	통과 (0.08ms, 10.2MB)
테스트 8 〉	통과 (0.20ms, 10.3MB)
테스트 9 〉	통과 (0.36ms, 10MB)
테스트 10 〉	통과 (0.74ms, 10.4MB)
테스트 11 〉	통과 (173.08ms, 15.5MB)
테스트 12 〉	통과 (161.01ms, 15.4MB)
테스트 13 〉	통과 (311.23ms, 13.3MB)
테스트 14 〉	통과 (403.80ms, 13.6MB)
테스트 15 〉	통과 (502.06ms, 19.7MB)
테스트 16 〉	통과 (581.77ms, 20.1MB)
테스트 17 〉	통과 (623.78ms, 19.2MB)
테스트 18 〉	통과 (5769.74ms, 38MB)
테스트 19 〉	통과 (5795.87ms, 42.3MB)
테스트 20 〉	통과 (5771.35ms, 42.6MB)
테스트 21 〉	통과 (5814.44ms, 42.6MB)
테스트 22 〉	통과 (5909.93ms, 42.7MB)
테스트 23 〉	통과 (5920.81ms, 43MB)
테스트 24 〉	통과 (5890.81ms, 43MB)
테스트 25 〉	통과 (0.08ms, 10.4MB)
테스트 26 〉	통과 (0.05ms, 10.1MB)
테스트 27 〉	통과 (0.04ms, 10.2MB)
테스트 28 〉	통과 (689.41ms, 20.7MB)
테스트 29 〉	통과 (8.74ms, 11.1MB)
테스트 30 〉	통과 (698.99ms, 20.9MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0
